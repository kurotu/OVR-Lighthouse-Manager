name: Build

permissions:
  contents: write

on:
  push:
  pull_request:
    branches: [ "master" ]

jobs:
  build:
    runs-on: windows-latest

    # TODO: Update environment variables.
    env:
      Solution_Name: OVRLighthouseManager.sln
      Project_Name: OVRLighthouseManager
    # Test_Project_Name: OVRLighthouseManager.Tests.MSTest

    steps:
    - name: Checkout
      uses: actions/checkout@v4
      with:
        fetch-depth: 0

    - name: Install .NET Core
      uses: actions/setup-dotnet@v4
      with:
        # 7 is Reqiored for dotnet-project-licenses
        dotnet-version: |
          7.0.x
          8.0.x

    - name: Setup MSBuild.exe
      uses: microsoft/setup-msbuild@v2

    - name: Restore
      run: dotnet restore $env:Solution_Name

    - name: Restore Tools
      run: dotnet tool restore

    - name: Install Pandoc
      run: choco install pandoc
  
    - name: Update ThirdPartyLicenses.md
      run: .\Scripts\UpdateThirdPartyLicenses.ps1

    - name: Update ThirdPartyLicenses.html
      run: pandoc -f markdown -t html -o OVRLighthouseManager/Documents/ThirdPartyLicenses.html ThirdPartyLicenses.md

    - name: Update bundled markdown
      run: cp *.md OVRLighthouseManager/Documents/

    - name: Build
      run: .\Scripts\Publish.ps1

    - name: Upload Artifact
      uses: actions/upload-artifact@v4
      with:
        name: build-artifact
        path: Installer/Output

    # - name: Test
    #   run: '& "C:\Program Files\Microsoft Visual Studio\2022\Enterprise\Common7\IDE\CommonExtensions\Microsoft\TestWindow\vstest.console.exe" ${env:Test_Project_Name}\bin\${{ matrix.platform }}\${{ matrix.configuration }}\**\${env:Test_Project_Name}.dll'

  release:
    if: startsWith(github.ref, 'refs/tags/')
    needs: build
    runs-on: ubuntu-latest

    steps:
    - name: Download Artifact
      uses: actions/download-artifact@v4
      with:
        name: build-artifact

    - name: Determine prerelease
      id: prerelease
      run: echo "prerelease=${{ contains(github.ref, '-') }}" >> $GITHUB_OUTPUT

    - name: Create Release
      uses: softprops/action-gh-release@v2
      with:
        files: |
          *.exe
        draft: true
        prerelease: ${{ steps.prerelease.outputs.prerelease }}
